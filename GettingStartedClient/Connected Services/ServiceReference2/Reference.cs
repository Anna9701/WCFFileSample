//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GettingStartedClient.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IFileService")]
    public interface IFileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/CloseFile", ReplyAction="http://tempuri.org/IFileService/CloseFileResponse")]
        void CloseFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/CloseFile", ReplyAction="http://tempuri.org/IFileService/CloseFileResponse")]
        System.Threading.Tasks.Task CloseFileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/OpenFile", ReplyAction="http://tempuri.org/IFileService/OpenFileResponse")]
        bool OpenFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/OpenFile", ReplyAction="http://tempuri.org/IFileService/OpenFileResponse")]
        System.Threading.Tasks.Task<bool> OpenFileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/WriteToFile", ReplyAction="http://tempuri.org/IFileService/WriteToFileResponse")]
        void WriteToFile(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/WriteToFile", ReplyAction="http://tempuri.org/IFileService/WriteToFileResponse")]
        System.Threading.Tasks.Task WriteToFileAsync(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/ReadFromFile", ReplyAction="http://tempuri.org/IFileService/ReadFromFileResponse")]
        string ReadFromFile(int length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/ReadFromFile", ReplyAction="http://tempuri.org/IFileService/ReadFromFileResponse")]
        System.Threading.Tasks.Task<string> ReadFromFileAsync(int length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/ReadAllFromFile", ReplyAction="http://tempuri.org/IFileService/ReadAllFromFileResponse")]
        string ReadAllFromFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/ReadAllFromFile", ReplyAction="http://tempuri.org/IFileService/ReadAllFromFileResponse")]
        System.Threading.Tasks.Task<string> ReadAllFromFileAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileServiceChannel : GettingStartedClient.ServiceReference2.IFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileServiceClient : System.ServiceModel.ClientBase<GettingStartedClient.ServiceReference2.IFileService>, GettingStartedClient.ServiceReference2.IFileService {
        
        public FileServiceClient() {
        }
        
        public FileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CloseFile() {
            base.Channel.CloseFile();
        }
        
        public System.Threading.Tasks.Task CloseFileAsync() {
            return base.Channel.CloseFileAsync();
        }
        
        public bool OpenFile() {
            return base.Channel.OpenFile();
        }
        
        public System.Threading.Tasks.Task<bool> OpenFileAsync() {
            return base.Channel.OpenFileAsync();
        }
        
        public void WriteToFile(string text) {
            base.Channel.WriteToFile(text);
        }
        
        public System.Threading.Tasks.Task WriteToFileAsync(string text) {
            return base.Channel.WriteToFileAsync(text);
        }
        
        public string ReadFromFile(int length) {
            return base.Channel.ReadFromFile(length);
        }
        
        public System.Threading.Tasks.Task<string> ReadFromFileAsync(int length) {
            return base.Channel.ReadFromFileAsync(length);
        }
        
        public string ReadAllFromFile() {
            return base.Channel.ReadAllFromFile();
        }
        
        public System.Threading.Tasks.Task<string> ReadAllFromFileAsync() {
            return base.Channel.ReadAllFromFileAsync();
        }
    }
}
